高可用搭建注意：
1.
    服务注册中心也会将自己作为客户端来尝试注册自己,为true（默认）时自动生效
    fetch-registry: false
    检索服务选项，当设置为True(默认值)时，会进行服务检索,注册中心不负责检索服务
    register-with-eureka: false
2.
    由于单机模拟，所以我们需要修改hosts文件，添加对应的映射：
    127.0.0.1 register-master
    127.0.0.1 register-salve1
    127.0.0.1 register-salve2
3.
    注册中心集群化
        为了提供高可用性，说白了就是保证机器挂了还是可以服务注册的能力，一般都不会将注册中心部署到一台机器上，而是采取多台机器部署，集群化管理。
        注册中心的集群化，最简单的做法就是，将注册中心相互注册，但是不开启检索服务的能力（fetch-registry: false），
        这也是Eureka的特性使得的，因为Eureka天然就是集服务端与客户端为一体的
4.
    Eureka如果不做注册中心时，它就是一个客户端，向注册中心提供注册的实例，每一个实例注册之后需要向注册中心发送心跳来检测服务的可用性，
    当需要调用服务的时候，它们会自己从注册中心去检索对应的服务信息，为了保证高性能，Eureka并不是每次都会去注册中心查询服务，
    Eureka Client注册到Eureka Server时，彼此会进行数据同步，也就是说Eureka Client会缓存一份Eureka Server中的服务列表信息，
    当本地服务不可用的时候才会去注册中心获取，这样可以较低服务端的请求压力，也提升了服务调用的时间。
5.
    当Eureka想要成为注册中心时，必须将注册中心的服务地址指向自己，
    同时禁用服务检索的功能。Eureka是一个高可用的组件，
    它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳来检测服务的可用性，注册中心不处理请求的转发，只是记录每个实例注册进来的信息